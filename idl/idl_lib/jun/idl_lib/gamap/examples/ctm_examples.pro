; $Id: ctm_examples.pro,v 1.1.1.1 2007/07/17 20:41:36 bmy Exp $
;-----------------------------------------------------------------------
;+
; NAME:
;        CTM_EXAMPLES
;
; PURPOSE:
;        Quick and dirty demonstration of various CTM_* routines
;
; CATEGORY:
;        GAMAP Examples, GAMAP Utilities
;
; CALLING SEQUENCE:
;        CTM_EXAMPLES
;
; INPUTS:
;        None
;
; KEYWORD PARAMETERS:
;        /PNG -> Set this switch to create PNG files from screen
;             shots of examples generated by this program.
;
; OUTPUTS:
;        None
;
; SUBROUTINES:
;        External Subroutines Required:
;        ===============================================
;        OPEN_DEVICE           MULTIPANEL
;        CTM_GET_DATA          GETMODELANDGRIDINFO
;        TVMAP                 PAUSE
;        CTM_PLOT              SCREEN2PNG
;        NYMD2TAU (function)   CTM_OVERLAY
;
; REQUIREMENTS:
;        None
;
; NOTES:
;        Updated with the most recent GAMAP routines.
;
; EXAMPLE:
;        CTM_EXAMPLES, /PNG
;
;             ; Show example plots and create screenshot output
;             ; as PNG files.
;
; MODIFICATION HISTORY:
;        mgs, 20 Aug 1998: INITIAL VERSION
;        mgs, 22 Oct 1998: - adapted for new use of CTM_GET_DATA
;                            some more comments
;        mgs, 26 Oct 1998: - attached a few more comments about extended 
;                            use of ctm_get_data at end
;        mgs, 18 Nov 1998: - added call to CTM_MAKE_DATAINFO
;        bmy, 06 Oct 2006: GAMAP VERSION 2.05
;                          - Updated examples w/ newest GAMAP routines
;                          - Added examples w/ CTM_OVERLAY and
;                            FIND_CELLS_BY_COUNTRY
;  bmy & phs, 13 Jul 2007: GAMAP VERSION 2.10
;                          - now uses FILE_WHICH to find ctm.bpch.examples
;
;-
; Copyright (C) 1998-2007, Martin Schultz,
; Bob Yantosca and Philippe Le Sager, Harvard University
; This software is provided as is without any warranty whatsoever. 
; It may be freely used, copied or distributed for non-commercial 
; purposes. This copyright notice must be kept with any copy of 
; this software. If this software shall be used commercially or 
; sold as part of a larger package, please contact the author.
; Bugs and comments should be directed to bmy@io.as.harvard.edu
; or phs@io.as.harvard.edu with subject "IDL routine ctm_examples"
;-----------------------------------------------------------------------


pro CTM_Examples, PNG=PNG, _EXTRA=e
   
   ; Create PNG images from plots?
   PNG = Keyword_Set( PNG )
   
   ;====================================================================
   ; Define variables for use by examples below
   ;====================================================================

   ; Diagnostic category name
   ;
   DiagN  = 'IJ-AVG-$'                 


   ; Ox tracer number
   ;
   Tracer = 2                 


   ; File name to open.  We will use the FILE_WHICH routine in IDL
   ; to first look in the current directory, and failing that, in
   ; all of the other directories specified in the !PATH variable.
   ;
   ; The EXPAND_PATH function will expand the path from a relative
   ; to an absolute path name (e.g. from ~/IDL/gamap2/data_files to
   ; /users/ctm/bmy/IDL/gamap2/data_files).
   ;
   FileName = File_Which( 'ctm.bpch.examples', /Include_Current_Dir )
   FileName = Expand_Path( FileName )


   ; Size of the plot window, in pixels
   ;
   XSize    = 640
   YSize    = 512


   ;====================================================================
   ; EXAMPLE 1: Load Ox data from a user selected file and plot 
   ; surface concentrations (LEVEL 1 in 'IJ-AVG-$') as image map
   ;
   ; We will use manual calls to CTM_GET_DATA and TVMAP
   ;====================================================================

   Print
   Print, '%%%%% EXAMPLE 1 %%%%%'
   Print, 'Display Ox surface data w/ CTM_GET_DATA and TVMAP ...'
   Print

   ; Open a plotting window.  
   ; Make it 800 x 600 pixels, and define 2 plot areas.
   ;
   Open_Device, WinParam=[ 0, XSize, YSize ]
   MultiPanel, 2
 

   ; Get the data block for Ox from FILE
   ;
   ; /FIRST selects the first time value in the file.
   ; /QUIET turns off printing of "% --- Retrieved data blocks for Ox ---"
   ;
   ; DATAINFO is an array of structures containing all data blocks
   ; for Ox corresponding to DIAGN and TRACER.
   ;
   ; _EXTRA=e passes any extra keywords to CTM_GET_DATA.
   ;
   CTM_Get_Data, DataInfo, DiagN, $
      FileName=FileName, Tracer=Tracer, /First,_EXTRA=e

                                
   ; Make sure the data was read correctly
   ;
   if ( N_Elements( DataInfo ) eq 0) then message,'Sorry: No data loaded.'

 
   ; Print number of data blocks found from the file
   ;
   Print, StrCompress( N_Elements( DataInfo ) ),  $ 
      ' records loaded from file ',filename


   ; Retrieve data from first data block.  (There should only be one 
   ; anyhow because we selected a specific tracer and the first time step).  
   ;
   ; NOTE: DATAINFO is an array of structures.  The DATA field of DATAINFO
   ; is a pointer to the data.  We need to deference the pointer with
   ; the "*" operator.
   ;
   Data = *( DataInfo[0].Data )


   ; Extract surface data (remember that IDL arrays start at 0!) 
   ; The REFORM command removes the extraneous dimension (i.e. sometimes
   ; when you resize an array it could be listed with 1 in the 3rd
   ; dimension...REFORM will get rid of that and make it a true 2D array)
   ;
   SrfData = Reform( Data[*,*,0] )    


   ; Print min and max of the surface data.  Note that you can scan
   ; for the min and max of the data array in the same pass.
   ;
   Print, 'Min and max: ', Min( SrfData, Max=M ), M



   ; Call GETMODELANDGRIDINFO to get the MODELINFO and GRIDINFO
   ; structures on which the data in FILENAME is defined.  This
   ; information is also stored within the DATAINFO structure.
   ;
   GetModelAndGridInfo, DataInfo[0], ModelInfo, GridInfo

 
   ; Get longitude (Xmid) and latitude (YMid) center arrays
   ;
   XMid = GridInfo.XMid
   YMid = GridInfo.YMid


   ; NOTE: the CTM grid has half-sized boxes at the poles.  We usually
   ; omit plotting these, as it can cause the map to become misaligned
   ; with the image map.  Resize the SRFDATA and YMID arrays to skip
   ; these polar boxes.
   ;
   ; GRIDINFO.IMX is the # of grid boxes along the longitude dimension
   ; GRIDINFO.JMX is the # of grid boxes along the latitude  dimension
   ;
   YMid    = YMid[1:GridInfo.JMX-2L]
   SrfData = SrfData[ *, 1:GridInfo.JMX-2L ]


   ; Call TVMAP to plot the surface data, with the following options:
   ;
   TvMap, SrfData, XMid, YMid,    $
      /Sample,                    $   ; Select pixel plot
      /Grid,                      $   ; Show grid lines
      /Countries, /Coasts,        $   ; Show country & coast outlines
      /USA,                       $   ; Show USA state boundaries
      /CBar,                      $   ; Select color bar ...
      Divisions=4,                $   ;  ... with 4 divisions,
      /Isotropic,                 $   ; Use aspect ratio from pixel plot
      Title='Surface Ox plot'         ; define title

   Pause
   

   ;====================================================================
   ; EXAMPLE 2: Now recreate the same map with CTM_PLOT
   ;====================================================================
   
   Print
   Print, '%%%%% EXAMPLE 2 %%%%%'
   Print, 'Display Ox surface data w/ CTM_PLOT ...'
   Print

   ; EXAMPLE 1 involved a lot of work.  However, there is a routine
   ; called CTM_PLOT that will do all of this for us in one fell swoop.
   ; In fact, CTM_PLOT is called directly by the GAMAP program.  GAMAP
   ; is just a user-friendly wrapper for CTM_PLOT.
   ; 
   ; DIAGN, FILENAME, TRACER, etc. are the same as in EXAMPLE 1 above
   ;
   CTM_Plot, DiagN,             $ ; Same diagnostic category as above
      /First,                   $ ; Pick first time in the bpch file
      Tracer=Tracer,            $ ; Same Ox tracer number as above
      FileName=FileName,        $ ; Same file name as above
      Lon=[ -180, 180 ],        $ ; Define longitude center range
      Lat=[  -86,  86 ],        $ ; Define latitude center range (skip poles)
      Lev=1,                    $ ; Define levels
      /Countries, /Coasts,      $ ; Show country & coast outlines
      /USA,                     $ ; Show USA state boundaries
      Divisions=4,              $ ; # of divisions for the color bar
      /Sample,                  $ ; Create boxy pixel plot
      /Quiet, /NoPrint            ; Suppress various output 
 

   ; Also put a top title across the page
   ;
   TopTitle = 'EXAMPLES 1 and 2: Plotting'

   XYOutS, 0.5, 0.95, TopTitle, $
      /Normal,                  $ ; Use normal coordinates
      Color=!MYCT.BLACK,        $ ; Set text color to black
      CharSize=2.0,             $ ; Set text size to twice normal size
      Align=0.5                   ; Center text
  

   ; Capture screen image to PNG file (if necessary)
   ;
   if ( PNG ) then Screen2PNG, 'examples1-2.png'

   Pause
   

   ;====================================================================
   ; EXAMPLE 3: Now create a zonal mean plot with CTM_PLOT
   ;====================================================================

   Print
   Print, '%%%%% EXAMPLE 3 %%%%%'
   Print, 'Display zonal mean Ox w/ CTM_PLOT ...'
   Print

   ; Open a plotting window.  
   ; Make it 800 x 600 pixels, and define 2 plot areas.
   ;
   Open_Device, WinParam=[ 0, XSize, YSize ]
   MultiPanel, 2


   ; Here we will call CTM_PLOT once DIAGN, FILENAME, TRACER, are the
   ; same as in EXAMPLES 1 & 2 above.  We set AVERAGE=1 to do a zonal
   ; mean.  (AVERAGE=2 would create a meridional mean, and AVERAGE=4
   ; would create an altitude mean.)
   ;
   ; Also, the AVERAGE flag values are additive, i.e. AVERAGE=3
   ; would create the average of all data in lon & lat, etc.
   ;
   ; NOTE: For a zonal mean plot it is OK to include the poles,
   ; hense the latitude range [ -90, 90 ].
   ;
   CTM_Plot, DiagN,             $ ; Same diagnostic category as above
      /First,                   $ ; Pick first time in the bpch file
      Tracer=Tracer,            $ ; Same Ox tracer number as above
      FileName=FileName,        $ ; Same file name as above
      Lon=[ -180, 180 ],        $ ; Define longitude center range
      Lat=[  -90,  90 ],        $ ; Define latitude center range (incl. poles)
      Lev=[    1,  30 ],        $ ; Define levels
      Average=1,                $ ; Pick avg option (1=lon, 2=lat, 4=alt)
      /Countries, /Coasts,      $ ; Show country & coast outlines
      /USA,                     $ ; Show USA state boundaries
      Divisions=4,              $ ; # of divisions for the color bar
      /Sample,                  $ ; Create boxy pixel plot
      /Quiet, /NoPrint            ; Suppress various output 

   Pause


   ;====================================================================
   ; EXAMPLE 4: Now create a meridional total plot CTM_PLOT
   ;====================================================================

   Print
   Print, '%%%%% EXAMPLE 4 %%%%%'
   Print, 'Display zonal total Ox w/ CTM_PLOT ...'
   Print

   ; The calling sequence for this is similar to EXAMPLE 3, except 
   ; that we will use the TOTAL flag instead of AVERAGE.
   ;
   ; The TOTAL flag values are additive, i.e. AVERAGE=3
   ; would create the total of all data in lon & lat, etc.
   ;
   ; NOTE: For a zonal total plot it is OK to include the poles,
   ; hense the latitude range [ -90, 90 ].
   ;
   ; NOTE: Usually we wouldn't total [ppbv] data, but here we do
   ; this just for the purpose of illustration.
   ;
   CTM_Plot, DiagN,             $ ; Same diagnostic category as above
      /First,                   $ ; Pick first time in the bpch file
      Tracer=Tracer,            $ ; Same Ox tracer number as above
      FileName=FileName,        $ ; Same file name as above
      Lon=[ -180, 180 ],        $ ; Define longitude center range
      Lat=[  -90,  90 ],        $ ; Define latitude center range (incl. poles)
      Lev=[    1,  30 ],        $ ; Define levels
      Total=2,                  $ ; Pick total option (1=lon, 2=lat, 4=alt)
      /Countries, /Coasts,      $ ; Show country & coast outlines
      /USA,                     $ ; Show USA state boundaries
      Divisions=4,              $ ; # of divisions for the color bar
      /Sample,                  $ ; Create boxy pixel plot
      /Quiet, /NoPrint            ; Suppress various output 

   ; Capture screen image to PNG file (if necessary)
   ;
   if ( PNG ) then Screen2PNG, 'examples3-4.png'

   Pause


   ;====================================================================
   ; EXAMPLE 5: Create a difference plot between 2 data blocks
   ;====================================================================

   Print
   Print, '%%%%% EXAMPLE 5 %%%%%'
   Print, 'Display difference plot ...'
   Print

   ; Turn off previous MULTIPANEL settings
   ; (CTM_PLOTDIFF will re-establish the multipanel environment)
   ;
   Multipanel, /Off


   ; Define the dates for both data blocks in FILENAME
   ;
   Date = [ 20010701, 20020820 ]


   ; The function NYMD2TAU converts the date into a TAU value.  TAU
   ; is the number of hours since 0 GMT on 1 Jan 1985.  TAU is used
   ; to timestamp data blocks in GEOS-Chem output files.
   ;
   ; TAU0 is the TAU value at the start of the diagnostic period.
   ; In this case, the TAU0 array will hold the TAU values at 0 GMT
   ; 2001/07/01 and 2001/08/20.
   ;
   Tau0 = Nymd2Tau( Date )


   ; Call CTM_PLOTDIFF to make a 4-panel difference plot.  
   ;
   ;    [ Map of data block #1  ]    [ Map of data block #2 ]
   ;
   ;    [ Map of abs difference ]    [ Map of % difference  ]
   ;
   CTM_PlotDiff, DiagN,   $  ; Pass diagnostic category
      FileName,           $  ; You can compare data blocks from separate
      FileName,           $  ;  files.  Here they're in the same file.
      Tracer=Tracer,      $  ; Tracer number
      Level=1,            $  ; We will look at surface data (LEV=1)
      Tau0=Tau0,          $  ; Specify TAU0 of both data blocks
      /Quiet, /NoPrint       ; Suppress various print messages

   ; Capture screen image to PNG file (if necessary)
   ;
   if ( PNG ) then Screen2PNG, 'example5.png'

   Pause

   ;====================================================================
   ; EXAMPLE 6: Overlay flight tracks or station points on a map
   ;====================================================================
   
   Print
   Print, '%%%%% EXAMPLE 6 %%%%%'
   Print, 'Display map overlaid with various things ...'
   Print

   ; Set up for 3 plots on a page
   ;
   MultiPanel, 3

   
   ; Remove existing entries in the global GAMAP common blocks
   ; (and also clean up all pointer and leftover memory!)
   ;
   CTM_Cleanup


   ; Get the data block for Ox from the file (as in Example 1)
   ;
   CTM_Get_Data, DataInfo, DiagN, $
      FileName=FileName, Tracer=Tracer, /First,_EXTRA=e
   
   ; Extract data from the DATAINFO structure
   ;
   Data = *( DataInfo[0].Data )

   
   ; Extract MODELINFO & GRIDINFO structures from DATAINFO
   ;
   GetModelAndGridInfo, DataInfo[0], InType, InGrid
   
   
   ; Get lon & lat arrays
   XMid   = InGrid.XMid
   YMid   = InGrid.YMid
   
   
   ; As in EXAMPLE 1, don't plot data near the poles.
   ; Also just take the data at the surface.
   ;
   Ymid   = YMid[1:InGrid.JMX-2]
   Data   = Data[*,1:InGrid.JMX-2,0]


   ;---------------------------------------------------------------------
   ; (6a) Plot flight track over TVMAP plot
   ;---------------------------------------------------------------------
           
   ; Make a "fake" aircraft track
   ; (of course, if you have a real flight track, use it...)
   TrackX = Replicate( -60, 100 )
   TrackY = Findgen( 100 ) - 50
   TrackD = FltArr( 100 )                  
               
   
   ; CTM_OVERLAY calls TVMAP (you can pass it all of the same keywords
   ; as in EXAMPLE 1).  However, it will also overplot either a line
   ; or individual station points.
   ;
   ; Here we will plot a pixel map w/ countries, continents, grid lines,
   ; and overlay a red, dashed-line flight track atop it.
   ;
   Title='Pixel map overlaid w/ flight track'

   CTM_OverLay,                  $ 
      Data,   XMid,   YMid,      $  ; Specify data & lon/lat arrays
      TrackD, TrackX, TrackY,    $  ; Specify flight track info & lon/lat
      /Sample,                   $  ; Create a "boxy" pixel plot
      /Isotropic,                $  ; Use aspect ratio from pixel plot
      /Grid,                     $  ; Plot grid lines
      /Countries, /Coasts, /USA, $  ; Plot coasts, country & state boundaries
      /CBar,      Divisions=4,   $  ; Specify a color bar w/ 4 divisions
      Min_Val=1e-20,             $  ; Set any data below 1e-20 to WHITE
      T_Color=!MYCT.RED,         $  ; Make the flight track RED
      T_Thick=3,                 $  ; Make the flight track 3 PIXELS WIDE
      T_LineStyle=2,             $  ; Make the flight track a DASHED LINE
      Title=Title                   ; Plot title

         
   ; Make a second "fake" aircraft track
   ; (of course, if you have a real flight track, use it...)
   ;
   TrackX = Replicate( 60, 100 )
   TrackY = Findgen( 100 ) - 50
   TrackD = Fltarr( 100 )
         
   ; Call CTM_OVERLAY again with /OVERPLOT to overplot 
   ; the second flight track on the same map
   ;
   CTM_OverLay,                  $
      Data,   XMid,    YMid,     $  ; Specify data & lon/lat arrays
      TrackD, TrackX, TrackY,    $  ; Specify flight track info & lon/lat
      T_Color=!MYCT.YELLOW,      $  ; Make the flight track YELLOW
      T_Thick=3,                 $  ; Make the flight track 3 PIXELS WIDE
      T_LineStyle=2,             $  ; Make the flight track a DASHED LINE
      /OverPlot                     ; Overplot atop the existing map

   Pause


   ;---------------------------------------------------------------------
   ; (6b) Draw boxes for geographic regions atop a TVMAP plot
   ;---------------------------------------------------------------------

   ; Define (X,Y) coordinates of first tagged tracer region
   ;
   TrackX = [ 0, 60, 60,  0, 0 ]
   TrackY = [ 0,  0, 30, 30, 0 ]
   TrackD = [ 0,  0,  0,  0, 0 ]
    
   ; Call CTM_OVERLAY again as above
   ;
   Title='Pixel map overlaid w/ geographic region boxes'

   CTM_OverLay,                  $
      Data,   XMid,   YMid,      $  ; Specify data & lon/lat arrays
      TrackD, TrackX, TrackY,    $  ; Specify lines of box region
      /Sample,                   $  ; Create a "boxy" pixel plot
      /Isotropic,                $  ; Use aspect ratio from pixel plot
      /Grid,                     $  ; Plot grid lines
      /Countries, /Coasts, /USA, $  ; Plot coasts, country & state boundaries
      /CBar,      Divisions=4,   $  ; Specify a color bar w/ 4 divisions 
      Min_Val=1e-20,             $  ; Set any data below 1e-20 to WHITE
      T_Color=!MYCT.BLACK,       $  ; Make the box color BLACK
      T_Thick=3,                 $  ; Make the box 3 PIXELS WIDE
      T_LineStyle=0,             $  ; Make the box a SOLID LINE
      Title=Title                   ; Specify the plot title


   ; Define second tagged tracer region
   ;
   TrackX = [ 0, 120, 120,   0, 0 ]
   TrackY = [ 0,   0, -30, -30, 0 ]
   TrackD = [ 0,   0,   0,   0, 0 ]
       
   ; Call CTM_OVERLAY_FLIGHT with /OVERPLOT to overplot
   ; atop the previously defined map
   CTM_OverLay,                  $  
      Data,   XMid,   YMid,      $  ; Specify data & lon/lat arrays
      TrackD, TrackX, TrackY,    $  ; Specify lines of box region
      T_Color=!MYCT.RED,         $  ; Make the box color RED
      T_Thick=3,                 $  ; Make the box 3 PIXELS WIDE
      T_LineStyle=0,             $  ; Make the box a SOLID LINE     
      /OverPlot                     ; Overplot atop the existing map

   Pause


   ;---------------------------------------------------------------------
   ; (6c) Draw individual station data points atop a TVMAP plot
   ;---------------------------------------------------------------------

   ; Define "fake" station data for demo
   ; along the equator between 60W and 60E
   ; (of course if you have real data, use that!)
   Ind    = Where( XMid ge -60 AND XMid le 60, N )
   TrackD = Findgen(N) + 30
   TrackY = Fltarr(N)  + 60
   TrackX = Xmid[Ind]

   ; Call CTM_OVERLAY with TVMAP keywords
   ; but also pass the station data points
   ;
   Title='Pixel map overlaid w/ station data points'           

   CTM_OverLay,                  $
      Data, XMid, YMid,          $  ; Specify data & lon/lat arrays
      TrackD, TrackX, TrackY,    $  ; Specify station data and lon/lat arrays
      /Sample,                   $  ; Create a "boxy" pixel plot
      /Isotropic,                $  ; Use aspect ratio from pixel plot
      /Grid,                     $  ; Plot grid lines     
      /Countries, /Coasts, /USA, $  ; Plot coasts, country & state boundaries 
      /CBar,      Division=4,    $  ; Specify a color bar w/ 4 divisions 
      Min_Val=1e-20,             $  ; Set any data below 1e-20 to WHITE
      T_Symbol=1,                $  ; Make the symbols FILLED CIRCLES
      SymSize=2,                 $  ; Make the symbol size 2 x NORMAL
      Title=Title                   ; Specify the plot title

   ; Capture screen image to PNG file (if necessary)
   ;
   if ( PNG ) then Screen2PNG, 'example6.png'

   Pause


   ;====================================================================
   ; EXAMPLE 7: Find CTM grid boxes according to country
   ;====================================================================
   
   Print
   Print, '%%%%% EXAMPLE 7 %%%%%'
   Print, 'Find grid cells according to country ...'
   Print

   ; Set up for 4 plots on a page
   ;
   MultiPanel, 4

   
   ; Set up 2 x 2.5 grid
   ;
   InType = CTM_Type( 'GEOS4', Res=2 )
   InGrid = CTM_Grid( InType )


   ; Get lon and lat arrays (don't plot poles)
   ;
   XMid = InGrid.Xmid
   YMid = InGrid.YMid
   YMid = Ymid[1:InGrid.JMX-2]


   ; Call FIND_CELLS_BY_COUNTRY to locate which grid boxes are within 
   ; a given country.  The country lookup table file is
   ; ~/IDL/gamap/countries.table.  Country names must match the names
   ; within this file.
   ; 
   ; Locate grid cells within the USA
   ; (Find all cells in which any part of the USA resides)
   ;
   ; Also -- we will not plot the data at the poles, as above.
   ;
   Mask = Find_Cells_By_Country( 'United States', InGrid, /Maximize )

   TvMap, Mask[*,1:InGrid.JMX-2], XMid, Ymid, $
      /Grid, /Countries, /Coasts, Min_Val=1e-20, /Sample, Title='USA'


   ; Locate grid cells w/in China
   ;
   Mask = Find_Cells_By_Country( 'China', InGrid, /Maximize )

   TvMap, Mask[*,1:InGrid.JMX-2], XMid, Ymid, $
      /Grid, /Countries, /Coasts, Min_Val=1e-20, /Sample, Title='China'


   ; Locate grid cells w/in Australia
   ;
   Mask = Find_Cells_By_Country( 'Australia', InGrid, /Maximize )

   TvMap, Mask[*,1:InGrid.JMX-2], XMid, Ymid, $
      /Grid, /Countries, /Coasts, Min_Val=1e-20, /Sample, Title='Australia'


   ; Locate grid cells w/in Russia
   ;
   Mask = Find_Cells_By_Country( 'Russia', InGrid, /Maximize )

   TvMap, Mask[*,1:InGrid.JMX-2], XMid, Ymid, $
      /Grid, /Countries, /Coasts, Min_Val=1e-20, /Sample, Title='Russia'

   ; Capture screen image to PNG file (if necessary)
   ;
   if ( PNG ) then Screen2PNG, 'example7.png'

   Pause
end
 
    
 
 
 
 

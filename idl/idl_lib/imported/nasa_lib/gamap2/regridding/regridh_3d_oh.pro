; $Id: regridh_3d_oh.pro,v 1.1.1.1 2007/07/17 20:41:32 bmy Exp $
;-----------------------------------------------------------------------
;+
; NAME:
;        REGRIDH_3D_OH
;
; PURPOSE:
;        Horiziontally regrids 3-D OH data from one CTM grid to another.
;        
; CATEGORY:
;        Regridding
;
; CALLING SEQUENCE:
;        REGRIDH_3D_OH [, Keywords ]
;
; INPUTS:
;        None
;
; KEYWORD PARAMETERS:
;        INFILENAME -> Name of the file containing OH data to be 
;             regridded.  If not specified, then a dialog box 
;             will ask the user to supply a file name.
;
;        OUTFILENAME -> Name of file to contain the regridded OH.
;             If not specified, then REGRID_3D_OH will use default 
;             output file name "OH_3Dglobal.{MODELNAME}.{RESOLUTION}".
;
;        OUTMODELNAME -> A string containing the name of the model 
;             grid onto which the data will be regridded.  If
;             OUTMODELNAME is not specified, then REGRID_3D_OH will
;             use the same model name as the input grid.
;
;        OUTRESOLUTION -> Specifies the resolution of the model grid
;             onto which the data will be regridded.  RESOLUTION
;             can be either a 2 element vector with [ DI, DJ ] or
;             a scalar (DJxDI: 8=8x10, 4=4x5, 2=2x2.5, 1=1x1, 
;             0.5=0.5x0.5).  Default for all models is 4x5.
;
; OUTPUTS:
;        None
;
; SUBROUTINES:
;        External Subroutines Required:
;        ==============================================
;        CTM_TYPE    (function)   CTM_GRID   (function)
;        CTM_NAMEXT  (function)   CTM_RESEXT (function)
;        CTM_REGRIDH (function)
;
; REQUIREMENTS:
;        References routines from both GAMAP and TOOLS packages
;
; NOTES:
;        (1) The merged OH file is generated by "merge_oh.pro".
;
; EXAMPLE:
;        REGRIDH_3D_OH, INFILENAME='OH_3Dglobal.geos3.2x25', $
;                       OUTFILENAME='OH_3Dglobal.geos3.4x5', $
;                       OUTRESOLUTION=4
;
;             ; Horizontally regrids 3-D OH file from the GEOS-3
;             ; 2 x 2.5 grid to the GEOS-3 4 x 5 grid.
;              
; MODIFICATION HISTORY:
;        bmy, 12 Sep 2002: VERSION 1.01
;        bmy, 22 Dec 2003: VERSION 1.02
;                          - totally rewritten for GAMAP v2-01
;                          - now call PTR_FREE to free the memory
;                          - added DIAGN keyword
;
;-
; Copyright (C) 2000-2003, Bob Yantosca, Harvard University
; This software is provided as is without any warranty
; whatsoever. It may be freely used, copied or distributed
; for non-commercial purposes. This copyright notice must be
; kept with any copy of this software. If this software shall
; be used commercially or sold as part of a larger package,
; please contact the author.
; Bugs and comments should be directed to bmy@io.harvard.edu
; with subject "IDL routine regridh_3d_oh"
;-----------------------------------------------------------------------

pro RegridH_3D_OH, InFileName=InFileName,   OutModelName=OutModelName,  $
                   OutFileName=OutFileName, OutResolution=OutResolution, $
                   DiagN=DiagN,             _EXTRA=e

   ;====================================================================
   ; Initialization
   ;====================================================================

   ; External functions
   FORWARD_FUNCTION CTM_Type, CTM_Grid, CTM_NamExt, CTM_ResExt, CTM_RegridH

   ; Keywords
   if ( N_Elements( DiagN         ) ne 1 ) then DiagN         = 'CHEM-L=$'
   if ( N_Elements( OutResolution ) eq 0 ) then OutResolution = 4
   
   ; Time values for each month
   Tau       = [ 0D,    744D,  1416D, 2160D, 2880D, 3624D, $
                 4344D, 5088D, 5832D, 6552D, 7296D, 8016D, 8760D ]

   ; First-time flag
   FirstTime = 1L

   ;====================================================================
   ; Process data
   ;====================================================================

   ; Read data blocks into DATAINFO array
   CTM_Get_Data, DataInfo, DiagN, FileName=InFileName, _EXTRA=e
         
   ; Loop over all data blocks
   for D = 0L, N_Elements( DataInfo ) - 1L do begin

      ;-------------------
      ; INPUT GRID
      ;-------------------

      ; Get input MODELINFO and GRIDINFO structures
      GetModelAndGridInfo, DataInfo[D], InType, InGrid
      
      ; Pointer to the data
      Pointer = DataInfo[D].Data
      
      ; Error check pointer
      if ( not Ptr_Valid( Pointer ) ) then Message, 'Invalid pointer!'
      
      ; Dereference the pointer to get the data
      InData  = *( Pointer )

      ; Free the associated pointer heap memory
      Ptr_Free, Pointer

      ;-------------------
      ; OUTPUT GRID
      ;-------------------

      ; If OUTMODELNAME is not specified, use the same value as in INTYPE
      if ( N_Elements( OutModelName ) ne 1 ) then OutModelName = InType.Name

      ; MODELINFO and GRIDINFO structures 
      OutType = CTM_Type( OutModelName, Resolution=OutResolution )
      OutGrid = CTM_Grid( OutType )

      ; Save OUTTYPE for future use
      OutTypeSav = OutType

      ;-------------------
      ; REGRID DATA
      ;-------------------

      ; Flag to determine when to use saved mapping weights
      US = 1L - FirstTime
      
      ; Regrid data from OLDGRID to NEWGRID
      OutData = CTM_RegridH( InData,  InGrid,         OutGrid,      $
                             /Double, /Per_Unit_Area, Use_Saved=US )

      ;-------------------
      ; SAVE DATA BLOCKS
      ;-------------------

      ; Create DATAINFO structure
      Success = CTM_Make_DataInfo( Float( OutData ),           $
                                   ThisDataInfo,               $
                                   ThisFileInfo,               $
                                   ModelInfo=OutType,          $
                                   GridInfo=OutGrid,           $
                                   DiagN=DataInfo[D].Category, $
                                   Tracer=DataInfo[D].Tracer,  $
                                   Tau0=DataInfo[D].Tau0,      $
                                   Tau1=DataInfo[D].Tau1,      $
                                   Unit=DataInfo[D].Unit,      $
                                   Dim=[ OutGrid.IMX,          $
                                         OutGrid.JMX,          $
                                         DataInfo[D].Dim[2],   $
                                         DataInfo[D].Dim[3] ], $
                                   First=DataInfo[D].First,    $
                                   /No_Global )

      ; Error check
      if ( not Success ) then Message, 'Could not make DATAINFO!'

      ; Save into NEWDATAINFO array of structures
      if ( FirstTime )                                         $
         then NewDataInfo = ThisDataInfo                       $
         else NewDataInfo = [ NewDataInfo, ThisDataInfo ]

      ; Reset first time flag
      FirstTime = 0L

      ; Undefine stuff
      UnDefine, InType
      UnDefine, InGrid
      UnDefine, InData
      UnDefine, OutType
      UnDefine, OutGrid
      UnDefine, OutData
      UnDefine, ThisDataInfo
   endfor
   
   ;====================================================================
   ; Write data to disk
   ;====================================================================

   ; Default OUTFILENAME
   if ( N_Elements( OutFileName ) ne 1 ) then begin
      OutFileName = 'OH_3Dglobal.' + CTM_NamExt( OutTypeSav ) + $
                    '.'            + CTM_ResExt( OutTypeSav )
   endif

   ; Save in binary punch format
   CTM_WriteBpch, NewDataInfo, ThisFileInfo, FileName=OutFileName
end
 
    
 

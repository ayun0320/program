; $Id: regridv_3d_oh.pro,v 1.1.1.1 2007/07/17 20:41:32 bmy Exp $
;-----------------------------------------------------------------------
;+
; NAME:
;        REGRIDV_3D_OH
;
; PURPOSE:
;        Vertically regrids 3-D OH data from one CTM grid to another.  
;
; CATEGORY:
;        Regridding
;
; CALLING SEQUENCE:
;        REGRIDV_3D_OH [, Keywords ]
;
; INPUTS:
;        None
;
; KEYWORD PARAMETERS:
;        INFILENAME -> Name of the file containing OH data to be
;             regridded.  If not specified, then a dialog box
;             will ask the user to supply a file name.
;
;        OUTFILENAME -> Name of file to contain the regridded OH.
;             Default is "OH_3Dglobal.{MODELNAME}.{RESOLUTION}".
;
;        OUTMODELNAME -> Name of the model grid onto which the data
;             will be regridded.  If OUTMODELNAME is not specified, 
;             REGRIDV_3D_OH will use the same model name as the
;             input grid.
;
;        DIAGN -> Diagnostic category of data block that you want
;             to regrid.  Default is "IJ-AVG-$".
;
;        /TROP_ONLY -> If set, will only regrid data within the
;             tropopause (i.e. up to the level specified by
;             MODELINFO.NTROP).  
;
; OUTPUTS:
;        None
;
; SUBROUTINES:
;        External Subroutines Required:
;        ============================================================
;        CTM_TYPE          (function)   CTM_GRID          (function)
;        CTM_NAMEXT        (function)   CTM_RESEXT        (function)
;        CTM_MAKE_DATAINFO (function)   CTM_GET_DATABLOCK (function)
;        REGRID_COLUMN     (function)   GETMODELANDGRIDINFO
;        UNDEFINE
;
; REQUIREMENTS:
;        None
;
; NOTES:
;        (1) The merged OH file is generated by "merge_oh.pro".
;
; EXAMPLE:
;        REGRIDV_3D_OH, INFILENAME='OH_3Dglobal.geos3.4x5', $
;                       OUTFILENAME='OH_3Dglobal.geos4.4x5',$
;                       OUTMODELNAME='GEOS4'
;
;             ; Regrids GEOS-3 merged OH (48 layers) to the GEOS-4 
;             ; grid (55 layers) at 4x5 horizontal resolution
;              
; MODIFICATION HISTORY:
;        bmy, 02 Aug 2000: VERSION 1.00
;                          - adapted from "regrid_oh_for_geos2.pro"
;        bmy, 05 Feb 2002: VERSION 1.01
;                          - now conserves column mass
;        bmy, 14 Mar 2002: VERSION 1.02
;                          - RENAMED TO "regridv_3d_oh.pro"
;        bmy, 22 Dec 2003: VERSION 1.03
;                          - totally rewritten for GAMAP v2-01
;                          - now supports hybrid grids
;  bmy & phs, 20 Jun 2007: GAMAP VERSION 2.10
;                          - Use FILE_WHICH to locate surf prs files
;
;-
; Copyright (C) 2000-2007, 
; Bob Yantosca, and Philippe Le Sager, Harvard University
; This software is provided as is without any warranty whatsoever. 
; It may be freely used, copied or distributed for non-commercial 
; purposes. This copyright notice must be kept with any copy of this 
; software. If this software shall be used commercially or sold as 
; part of a larger package, please contact the author.
; Bugs and comments should be directed to bmy@io.as.harvard.edu
; or phs@io.as.harvard.edu with subject "IDL routine regridv_3d_oh"
;-----------------------------------------------------------------------


pro RegridV_3D_OH, InFileName=InFileName,   OutModelName=OutModelName, $
                   OutFileName=OutFileName, Trop_Only=Trop_Only,       $
                   _EXTRA=e

   ;====================================================================
   ; Initialization
   ;====================================================================

   ; External Functions
   FORWARD_FUNCTION CTM_Type, CTM_Grid, CTM_NamExt, CTM_ResExt, Regrid_Column 
    
   ; Keywords
   Trop_Only = Keyword_Set( Trop_Only )
   if ( N_Elements( OutModelName   ) ne 1 ) then OutModelName = 'GEOS3'
    
   ; Time values for each month
   Tau       = [ 0D,    744D,  1416D, 2160D, 2880D, 3624D, $
                 4344D, 5088D, 5832D, 6552D, 7296D, 8016D, 8760D ]

   ; First-time flag
   FirstTime = 1L

   ;====================================================================
   ; Process data
   ;====================================================================

   ; Read all data blocks into DATAINFO
   CTM_Get_Data, DataInfo, 'CHEM-L=$', FileName=InFileName, _EXTRA=e

   ; Loop over data blocks
   for D = 0L, N_Elements( DataInfo ) - 1L do begin

      ; Make sure this data block is 3-D
      if ( DataInfo[D].Dim[2] le 1 ) then Message, 'DATA is not 3-D!'
      
      ; Echo Info
      print, 'Processing tracer ' + StrTrim( DataInfo[D].TracerName, 2) + $
             ' for TAU0 = '       + String( DataInfo[D].Tau0, Format='(i8)' )

      ;------------------
      ; INPUT GRID
      ;------------------
      
      ; Get MODELINFO and DATAINFO structures
      GetModelAndGridInfo, DataInfo[D], InType, InGrid
      
      ; Grid box volumes [cm3]
      GEOS  = ( InType.Family eq 'GEOS' OR InType.Family eq 'GENERIC' )
      GISS  = ( InType.Family eq 'GISS' )
      FSU   = ( InType.Family eq 'FSU'  )
      InVol = CTM_BoxSize( InGrid, GEOS=GEOS, GISS=GISS, FSU=FSU, /Vol, /Cm3 )
      InVol = InVol[ *, *, 0L:DataInfo[D].Dim[2]-1L ] 
      
      ; Vertical edge coordinates
      if ( InType.Hybrid )                                        $
         then InVertEdge = InGrid.EtaEdge[ 0L:DataInfo[D].Dim[2] ] $
         else InVertEdge = InGrid.SigEdge[ 0L:DataInfo[D].Dim[2] ] 

      ; Pointer to the INPUT DATA
      Pointer = DataInfo[D].Data 

      ; Error check
      if ( not Ptr_Valid( Pointer ) ) then Message, 'Invalid Pointer!'

      ; Get INPUT data
      InData  = *( Pointer )

      ; Free the heap memory
      Ptr_Free, Pointer

      ;------------------
      ; OUTPUT GRID
      ;------------------
      
      ; Get MODELINFO and DATAINFO structures 
      OutType = CTM_Type( OutModelName, Res=InType.Resolution )
      OutGrid = CTM_Grid( OutType )

      ; Maximum level to save on OUTPUT grid
      if ( Trop_Only )            $   
         then LMX = OutType.NTROP $
         else LMX = OutGrid.LMX      

      ; Grid box volumes [cm3]
      GEOS   = ( OutType.Family eq 'GEOS' OR OutType.Family eq 'GENERIC' )
      GISS   = ( OutType.Family eq 'GISS' )
      FSU    = ( OutType.Family eq 'FSU'  )
      OutVol = CTM_BoxSize( OutGrid, GEOS=GEOS, GISS=GISS, FSU=FSU, /Vol,/Cm3 )
      OutVol = OutVol[ *, *, 0L:LMX-1L ] 

      ; Vertical edge coordinates
      if ( OutType.Hybrid )                           $ 
         then OutVertEdge = OutGrid.EtaEdge[ 0L:LMX ] $
         else OutVertEdge = OutGrid.SigEdge[ 0L:LMX ]

      ; Save OUTTYPE for future use
      OutTypeSav = OutType

      ;------------------
      ; SURFACE PRESSURE
      ;------------------

      ; Surface pressure filename
      PsFileName = 'ps-ptop.' + CTM_NamExt( InType ) + $
                   '.'        + CTM_ResExt( InType )

      ; Look for PSFILENAME in the current directory, and 
      ; failing that, in the directories specified in !PATH
      PsFileName = File_Which( PsFileName, /Include_Current_Dir )
      PsFileName = Expand_Path( PsFileName )

      ; Get current month index
      Result  = Tau2YYMMDD( DataInfo[D].Tau0 )
      MonInd  = Result.Month - 1L
    
      ; Read this month's surface pressure data
      Success = CTM_Get_DataBlock( PSurf, 'PS-PTOP',    $
                                   FileName=PSFileName, $
                                   Tracer=1L,           $
                                   Tau0=Tau[MonInd] )
   
      ; Error check
      if ( not Success ) then Message, 'Could not read PSURF data!'

      ;------------------
      ; USE COLUMN SUMS?
      ;------------------
     
      ; Decide whether to suppress column sum or not -- if we are going
      ; from a high grid to a low grid, then column sum doesn't make sence
      if ( InType.Name  eq 'GEOS3'    AND $
           OutType.Name eq 'GEOS1' ) then begin
         No_Check = 1                     

      endif else if ( InType.Name  eq 'GEOS3'        AND $
                      OutType.Name eq 'GEOS_STRAT' ) then begin
         No_Check = 1                     

      endif else if( InType.Name  eq 'GEOS4'   AND $
                     OutType.Name eq 'GEOS1' ) then begin 
         No_Check = 1                                            
         
      endif else if ( InType.Name  eq 'GEOS_STRAT' AND $
                      OutType.Name eq 'GEOS1'    ) then begin
         No_Check = 1                                            
   
      endif else begin
         No_Check = 0
         
      endelse

      ; Don't check if we are only saving in the troposphere
      if ( Trop_Only ) then No_Check = 1

      ;------------------
      ; REGRID DATA
      ;------------------

      ; OUTPUT DATA array
      OutData = DblArr( OutGrid.IMX, OutGrid.JMX, LMX )
         
      ; Loop over surface grid boxes
      for J = 0L, InGrid.JMX - 1L do begin
      for I = 0L, InGrid.IMX - 1L do begin

         ; Compute pressure edges for this column
         InPEdge  = ( InVertEdge  * PSurf[I,J] ) + InType.PTOP
         OutPEdge = ( OutVertEdge * PSurf[I,J] ) + OutType.PTOP
           
         ; Convert OH column on INPUT GRID from [molec/cm3] to [molec]
         InCol = Reform( InData[I,J,*] * InVol[I,J,*] )
 
         ; Regrid vertically -- preserve column mass
         OutCol = Regrid_Column( InCol, InPEdge, OutPEdge, $
                                 No_Check=No_Check, _EXTRA=e )
         
         ; Convert OH column on OUTPUT grid [molec] to [molec/cm3]
         OutData[I,J,*] = Reform( OutCol / OutVol[I,J,*] )
           
         ; Undefine variables for safety's sake
         UnDefine, InCol
         UnDefine, OutCol
         UnDefine, InPEdge
         UnDefine, OutPEdge

      endfor
      endfor

      ;------------------
      ; SAVE DATA BLOCKS
      ;------------------

      ; Make a DATAINFO structure 
      Success = CTM_Make_DataInfo( Float( OutData ),           $
                                   ThisDataInfo,               $
                                   ThisFileInfo,               $
                                   ModelInfo=OutType,          $
                                   GridInfo=OutGrid,           $
                                   DiagN=DataInfo[D].Category, $
                                   Tracer=DataInfo[D].Tracer,  $
                                   Tau0=DataInfo[D].Tau0,      $
                                   Tau1=DataInfo[D].Tau1,      $
                                   Unit=DataInfo[D].Unit,      $
                                   Dim=[ OutGrid.IMX,          $
                                         OutGrid.JMX,          $
                                         LMX, 0L ],            $
                                   First=DataInfo[D].First,    $
                                   /No_Global )
 
      ; Store all data blocks in the NEWDATAINFO array of structures
      if ( FirstTime )                                         $
         then NewDataInfo = ThisDataInfo                       $
         else NewDataInfo = [ NewDataInfo, ThisDataInfo ]
      
      ; Reset first time flag
      FirstTime = 0L

      ; Undefine stuff
      UnDefine, ThisDataInfo
      UnDefine, InType
      UnDefine, InGrid
      UnDefine, InData
      UnDefine, InVertEdge
      UnDefine, InVol
      UnDefine, OutType
      UnDefine, OutGrid
      UnDefine, OutData
      UnDefine, OutVertEdge
      UnDefine, OutVol
      UnDefine, PSurf
      UnDefine, LMX
      
   endfor

   ;=================================================================   
   ; Save data to disk
   ;=================================================================

   ; Default OUTFILENAME
   if ( N_Elements( OutFileName ) ne 1 ) then begin
      OutFileName = 'OH_3Dglobal.' + CTM_NamExt( OutTypeSav ) + $
                    '.'            + CTM_ResExt( OutTypeSav )
   endif

   ; Save to binary punch format
   CTM_WriteBpch, NewDataInfo, ThisFileInfo, FileName=OutFileName

end                               
 
    
 
